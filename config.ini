#############################################
# Generic Ecohydrological model
# Configuration file
###########################################


# Paths
Maps_Folder = ./spatial/
Clim_Maps_Folder = ./climate/
Output_Folder = ./outputs/

# Model configuration
Simul_start = 0 # always 0
Simul_end = 31536000 # in second
Simul_tstep = 86400 # seconds (daily)
Clim_input_tstep = 86400 # seconds (daily)
Report_interval = 86400 # seconds (daily)
Update_interval = 43200000 # seconds (every 100 days); the interval for land use / soil type update 

# Options 
# How is climate inputs orgainsed?
# 1: raster
# 2: aggregated binary file (climate_zone file should be specified)
opt_climate_input_format = 2
# Enable isotopic tracking?
# 0: disabled
# 1: enabled
opt_tracking_isotope = 1
# Canopy interception
# 1 :maximum canopy storage unmodified
# 2 :storage corrected (Landarf et al., 2024)
opt_intecept = 1
# Snow accumulation method
# 1: Degree day factor method
opt_snow = 1
# Pedo-transfer function to estimate Van Genuchten parameters
# 1: Wosten et al., (1999)
# 2: Wosten et al., (1997)
# 3: Zacharias et al., (2007)
opt_pedotransf = 1
# Method to estimate field capacity
# 1: based on Van Genuchten Model
# 2: Ks considered, Twarakavi et al., (2007)
opt_fieldcapacity = 2
# The way to estimate soil characteristics in deeper layer
# 1: All layers remain the same
# 2: exponential profile based on depth
# 3: Pedo-transfer function for each layer
opt_depthprofile = 3
# Iniltration model
# 1: Green-Ampt model
# 2: Green-Ampt model
opt_infil = 1
# Percolation model
# 1: based on travel time and excess water above FC
# 2: Green-Ampt model
opt_percolation = 1
# Evapotranspiration function
# 1: based on PET and a soil water dependent root extraction function (Feddes et al., 1976)
opt_evap = 1
# Overland flow routing
# 1: All ponding water goes to next cell
opt_routOvf = 1
# Interflow routing
# 1: linear approximation of Kinematic Wave
opt_routinterf = 1
# GW routing
# 1: linear approximation of Kinematic Wave
opt_routGWf = 1
# Stream routing
# 1: Kinematic Wave
opt_routQ = 1

### Climate
num_cliamte_zones = 10 # The number of climate zones for parameterisation.
climate_zones = climate_zones.asc # Needed if opt_climate_input_format = 2; Zone ID should start from 0!
Precipitation  =  P.bin   # Precipitation [m]
Air_temperature  =  Ta.bin   # Air temperature [degree C]
Relative_humidity  =  RH.bin   # Relative humidity [decimal]
Potential_evapotranspiration  =  PET.bin   # Potential evapotranspiration [m]
Leaf_area_index  =  LAI.bin   # Leaf area index [decimal]

### GIS
flow_direction  =  fdir.asc   # Flow direction [int; d8 method]
Gauge_mask  =  Gauge_to_Report.asc   # Gauges that require outputs [int; start from 0]
# The sequence of reports follows the row-col order
#For instance, [row 1, col 1] ->  [row 1, col 2] -> [row 2, col 1]
Channel_width  =  chnwidth.asc   # Channel width [m]
Channel_depth  =  chndepth.asc   # Channel depth [m]
Channel_length  =  chnlength.asc   # Channel length [m]
slope  =  slope.asc   # Slope [m/m]
Soil_depth1  =  depth1.asc   # Depth of soil layer 1 [m]
Soil_depth2  =  depth2.asc   # Depth of soil layer 2 [m]
sand1  =  sand1.asc   # Sand content of layer 1 [decimal]
sand2  =  sand2.asc   # Sand content of layer 2 [decimal], only needed when opt_depthprofile = 3
sand3  =  sand3.asc   # Sand content of layer 3 [decimal], only needed when opt_depthprofile = 3
clay1  =  clay1.asc   # Clay content of layer 1 [decimal]
clay2  =  clay2.asc   # Clay content of layer 2 [decimal], only needed when opt_depthprofile = 3
clay3  =  clay3.asc   # Clay content of layer 3 [decimal], only needed when opt_depthprofile = 3
silt1  =  silt1.asc   # Silt content of layer 1 [decimal], only needed when opt_pedotransf = 1 or 2
silt2  =  silt2.asc   # Silt content of layer 2 [decimal], only needed when opt_depthprofile = 3
silt3  =  silt3.asc   # Silt content of layer 3 [decimal], only needed when opt_depthprofile = 3
organic1  =  organic1.asc   # Organic content of layer 1 [decimal]
organic2  =  organic2.asc   # Organic content of layer 2 [decimal], only needed when opt_depthprofile = 3
organic3  =  organic3.asc   # Organic content of layer 3 [decimal], only needed when opt_depthprofile = 3
bulk_density1  =  bulkdensity1.asc   # Bulk density of layer 1 [g/cm3]
bulk_density2  =  bulkdensity2.asc   # Bulk density of layer 2 [g/cm3], only needed when opt_depthprofile = 3
bulk_density3  =  bulkdensity3.asc   # Bulk density of layer 3 [g/cm3], only needed when opt_depthprofile = 3

### Storages
canopy_storage  =  I.asc   # Canopy storage [m]
snow_depth  =  snow.asc   # Snow depth in [m]
pond  =  pond.asc   # Ponding water in [m]
SMC_layer1  =  theta1.asc   # Soil moisture in layer 1 [decimal]
SMC_layer2  =  theta2.asc   # Soil moisture in layer 2 [decimal]
SMC_layer3  =  theta3.asc   # Soil moisture in layer 3 [decimal]
groundwater_storage  =  GW.asc   # Groundwater storage [m]

### Fluxes
discharge  =  Q.asc   # Discharge [m3/s]

### Parameters
num_category = 10 # The number of categories for parameterisation ...
#The categories should include the land use types, soil types, or any other types for parameterisation ...
#The distribution of each category (in decimal proportion) should be specified in cat_id.asc ...
#The first category (column) represents global parameter (i.e., cat_0.asc should be 1)
parameter_file = param.ini # The file contains all parameter name, values, and descriptio. Each column =  a category
Soil_depth3  =  depth3   # Depth of soil layer 3 [m]
alpha  =  alpha   # The weighting parameter that links LAI and maximum canopy storage [-]
rE  =  rE   # Parameter regulates the surface cover fraction, rExtinct = -0.463 Rutter (1972)
snow_rain_threshold  =  snow_rain_thre   # The temperature for snow melt  [m]
deg_day_min  =  deg_day_min   # Degree-day factor with no precipitation [m-1 degreeC-1]
deg_day_max  =  deg_day_max   # Maximum Degree-day factor [m-1 degreeC-1]
deg_day_increase  =  deg_day_increase   # Increase of the Degree-day factor per mm of increase in precipitation precipitation [s-1 degreeC-1]
froot_coeff  =  froot_coeff   # Root fraction coefficient [-]
ref_thetaS  =  ref_thetaS   # Reference saturated soil moisture [-]
PTF_VG_clay  =  PTF_VG_clay   # Pedotransfer function for parameter estimation of Van Genuchten Model [-]
PTF_VG_Db  =  PTF_VG_Db   # Pedotransfer function for parameter estimation of Van Genuchten Model [-]
PTF_Db  =  PTF_Ks_const   # Pedotransfer parameter for estimation of saturated hydraulic conductivity [-]
PTF_sand  =  PTF_Ks_sand   # Pedotransfer parameter for estimation of saturated hydraulic conductivity [-]
PTF_clay  =  PTF_Ks_clay   # Pedotransfer parameter for estimation of saturated hydraulic conductivity [-]
PTF_Ks_slope  =  PTF_Ks_slope   # Slope correction for estimation of saturated hydraulic conductivity [-]
SWP  =  SWP   # Soil water potentail for field capacity estimation [-], only needed when opt_fieldcapacity = 1
KvKh  =  KvKh   # The coefficient to transform Ks to effective Ks [-], only needed when opt_infil = 1
psiAE  =  psiAE   # The wetting front potential for Green-Ampt model [mm], only needed when opt_infil = 1
Ksat  =  KKs   # The exponential parameter for depth-dependent saturated hydraulic conductivity [-], only needed when opt_depthprofile = 2
Kporos  =  Ksat   # The exponential parameter for depth-dependent saturated moisture content  [-], only needed when opt_depthprofile = 2
BClambda  =  BClambda   # The exponential parameter for depth-dependent field capacity  [-], only needed when opt_depthprofile = 2
pOvf_toChn  =  pOvf_toChn   # The weighting linear parameter for overland flow routing towards channel  [-]
interfExp  =  interfExp   # The exponetial weighting parameter for interflow flow routing towards channel  [-]
winterf  =  winterf   # The weight parameter in kinematic wave solution  [-]
GWfExp  =  GWfExp   # The exponetial weighting parameter for GW flow routing towards channel  [-]
pActiveGW  =  pActiveGW   # The active proportion of GW storage that contributes to channel recharge  [-]
Manningn  =  Manningn   # Manning N for stream routing [-], only needed when opt_routQ = 1


### Reports
# 1: report maps; 2: report time series at gauging stations
report_canopy_storage  =  0   # Canopy storage [m]
report_snow_depth  =  0   # Snow depth in [m]
report_pond  =  0   # Ponding water in [m]
report_SMC_layer1  =  0   # Soil moisture in layer 1 [decimal]
report_SMC_layer2  =  0   # Soil moisture in layer 2 [decimal]
report_SMC_layer3  =  0   # Soil moisture in layer 3 [decimal]
report_groundwater_storage  =  0   # Groundwater storage [m]
report_interception  =  0   # Interception [m]
report_throufall  =  0   # Throughfall [m]
report_snowmelt  =  0   # Snow melt [m]
report_infiltration  =  0   # Inflitration into soil layer 1 [m]
report_perc_layer1  =  0   # Percolation into layer 2 [m]
report_perc_layer2  =  0   # Percolation into layer 3 [m]
report_perc_layer3  =  0   # Percolation into gw reservior [m]
report_canopy_evap  =  0   # Canopy evaporation [m]
report_soil_evap  =  0   # Soil evaporation [m]
report_transp  =  0   # Total transpiration in three layers [m]
report_transp_layer1  =  0   # Transpiration in layer 1 [m]
report_transp_layer2  =  0   # Transpiration in layer 2 [m]
report_transp_layer3  =  0   # Transpiration in layer 3 [m]
report_overland_flow_input  =  0   # Overland flow from upstream cell(s) [m]
report_overland_flow_output  =  0   # Overland flow to downstream cell [m]
report_overland_flow_toChn  =  0   # Overland flow to Channel [m]
report_interflow_input  =  0   # Interflow from upstream cell(s) [m]
report_interflow_output  =  0   # Interflow to downstream cell [m]
report_interflow_toChn  =  0   # Interflow to Channel [m]
report_groundwater_flow_toChn  =  0   # Groundwater flow to Channel [m]
report_discharge  =  0   # Discharge [m3/s]
